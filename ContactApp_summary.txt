File: ./app/src/androidTest/java/com/example/contactapp/ExampleInstrumentedTest.kt

package com.example.contactapp

import androidx.test.platform.app.InstrumentationRegistry
import androidx.test.ext.junit.runners.AndroidJUnit4

import org.junit.Test
import org.junit.runner.RunWith

import org.junit.Assert.*

/**
 * Instrumented test, which will execute on an Android device.
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
@RunWith(AndroidJUnit4::class)
class ExampleInstrumentedTest {
    @Test
    fun useAppContext() {
        // Context of the app under test.
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        assertEquals("com.example.contactapp", appContext.packageName)
    }
}

File: ./app/src/test/java/com/example/contactapp/ExampleUnitTest.kt

package com.example.contactapp

import org.junit.Test

import org.junit.Assert.*

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
class ExampleUnitTest {
    @Test
    fun addition_isCorrect() {
        assertEquals(4, 2 + 2)
    }
}

File: ./app/src/main/java/com/example/contactapp/MainActivity.kt

package com.example.contactapp

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.viewModels
import com.example.contactapp.navigation.NavManager
import com.example.contactapp.ui.theme.ContactAppTheme
import com.example.contactapp.viewModel.ContactViewModel

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        //enableEdgeToEdge()
        val viewModel: ContactViewModel by viewModels()
        setContent {
            ContactAppTheme {
                NavManager(viewModel)
            }
        }
    }
}

File: ./app/src/main/java/com/example/contactapp/viewModel/ContactViewModel.kt

package com.example.contactapp.viewModel

import android.app.Application
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import androidx.room.Room
import com.example.contactapp.model.ContactModel
import com.example.contactapp.room.AppDatabase
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

class ContactViewModel(application: Application): AndroidViewModel(application) {

    private val db = Room.databaseBuilder(
        application,
        AppDatabase::class.java,
        "contact_database"
    ).build()

    private val _contactList = MutableStateFlow<List<ContactModel>>(emptyList())
    val contactList = _contactList.asStateFlow()

    init {
        viewModelScope.launch(Dispatchers.IO) {
            db.contactDao().getContacts().collect { contacts ->
                _contactList.value = contacts
            }
        }
    }

    fun insertContact(contact: ContactModel) {
        viewModelScope.launch(Dispatchers.IO) {
            db.contactDao().insertContact(contact)
        }
    }

    fun updateContact(contact: ContactModel) {
        viewModelScope.launch(Dispatchers.IO) {
            db.contactDao().updateContact(contact)
        }
    }

    fun deleteContact(contact: ContactModel) {
        viewModelScope.launch(Dispatchers.IO) {
            db.contactDao().deleteContact(contact)
        }
    }
}


File: ./app/src/main/java/com/example/contactapp/ui/theme/Color.kt

package com.example.contactapp.ui.theme

import androidx.compose.ui.graphics.Color

val Purple80 = Color(0xFFD0BCFF)
val PurpleGrey80 = Color(0xFFCCC2DC)
val Pink80 = Color(0xFFEFB8C8)

val Purple40 = Color(0xFF6650a4)
val PurpleGrey40 = Color(0xFF625b71)
val Pink40 = Color(0xFF7D5260)

File: ./app/src/main/java/com/example/contactapp/ui/theme/Theme.kt

package com.example.contactapp.ui.theme

import android.app.Activity
import android.os.Build
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.dynamicDarkColorScheme
import androidx.compose.material3.dynamicLightColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.platform.LocalContext

private val DarkColorScheme = darkColorScheme(
    primary = Purple80,
    secondary = PurpleGrey80,
    tertiary = Pink80
)

private val LightColorScheme = lightColorScheme(
    primary = Purple40,
    secondary = PurpleGrey40,
    tertiary = Pink40

    /* Other default colors to override
    background = Color(0xFFFFFBFE),
    surface = Color(0xFFFFFBFE),
    onPrimary = Color.White,
    onSecondary = Color.White,
    onTertiary = Color.White,
    onBackground = Color(0xFF1C1B1F),
    onSurface = Color(0xFF1C1B1F),
    */
)

@Composable
fun ContactAppTheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    // Dynamic color is available on Android 12+
    dynamicColor: Boolean = true,
    content: @Composable () -> Unit
) {
    val colorScheme = when {
        dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
            val context = LocalContext.current
            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
        }

        darkTheme -> DarkColorScheme
        else -> LightColorScheme
    }

    MaterialTheme(
        colorScheme = colorScheme,
        typography = Typography,
        content = content
    )
}

File: ./app/src/main/java/com/example/contactapp/ui/theme/Type.kt

package com.example.contactapp.ui.theme

import androidx.compose.material3.Typography
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp

// Set of Material typography styles to start with
val Typography = Typography(
    bodyLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 16.sp,
        lineHeight = 24.sp,
        letterSpacing = 0.5.sp
    )
    /* Other default text styles to override
    titleLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 22.sp,
        lineHeight = 28.sp,
        letterSpacing = 0.sp
    ),
    labelSmall = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Medium,
        fontSize = 11.sp,
        lineHeight = 16.sp,
        letterSpacing = 0.5.sp
    )
    */
)

File: ./app/src/main/java/com/example/contactapp/repository/ContactRepository.kt

package com.example.contactapp.repository

import com.example.contactapp.model.ContactModel
import com.example.contactapp.room.ContactDao
import kotlinx.coroutines.flow.Flow

class ContactRepository(private val contactDao: ContactDao) {

    fun getAllContacts(): Flow<List<ContactModel>> = contactDao.getContacts()

    suspend fun insertContact(contact: ContactModel) {
        contactDao.insertContact(contact)
    }

    suspend fun updateContact(contact: ContactModel) {
        contactDao.updateContact(contact)
    }

    suspend fun deleteContact(contact: ContactModel) {
        contactDao.deleteContact(contact)
    }
}


File: ./app/src/main/java/com/example/contactapp/room/AppDatabase.kt

package com.example.contactapp.room

import androidx.room.Database
import androidx.room.RoomDatabase
import com.example.contactapp.model.ContactModel

@Database(entities = [ContactModel::class], version = 2, exportSchema = false)
abstract class AppDatabase : RoomDatabase() {
    abstract fun contactDao(): ContactDao
}

File: ./app/src/main/java/com/example/contactapp/room/ContactDao.kt

package com.example.contactapp.room

import androidx.room.*
import com.example.contactapp.model.ContactModel
import kotlinx.coroutines.flow.Flow

@Dao
interface ContactDao {

    @Query("SELECT * FROM contacts")
    fun getContacts(): Flow<List<ContactModel>>

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertContact(contact: ContactModel)

    @Delete
    suspend fun deleteContact(contact: ContactModel)

    @Update
    suspend fun updateContact(contact: ContactModel)
}


File: ./app/src/main/java/com/example/contactapp/navigation/NavManager.kt

package com.example.contactapp.navigation

import androidx.compose.runtime.Composable
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import com.example.contactapp.view.HomeView
import com.example.contactapp.view.AddContactView
import com.example.contactapp.viewModel.ContactViewModel

@Composable
fun NavManager(viewModel: ContactViewModel) {
    val navController = rememberNavController()
    NavHost(navController, startDestination = "Home") {
        composable("Home") {
            HomeView(navController, viewModel)
        }
        composable("AddContactView") {
            AddContactView(navController, viewModel)
        }
    }
}

File: ./app/src/main/java/com/example/contactapp/model/ContactModel.kt

package com.example.contactapp.model

import androidx.room.Entity
import androidx.room.PrimaryKey

@Entity(tableName = "contacts")
data class ContactModel(
    @PrimaryKey(autoGenerate = true)
    val id: Long = 0,
    val name: String,
    val phone: String,
    val email: String,
    val profileImage: String,
    val dateOfBirth: String
)


File: ./app/src/main/java/com/example/contactapp/view/HomeView.kt

package com.example.contactapp.view

import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material3.CenterAlignedTopAppBar
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.FloatingActionButton
import androidx.compose.material3.Icon
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Modifier
import androidx.navigation.NavController
import com.example.contactapp.viewModel.ContactViewModel
import java.io.File

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun HomeView(navController: NavController, viewModel: ContactViewModel) {
    Scaffold(
        topBar = {
            CenterAlignedTopAppBar(
                title = { Text(text = "Contactos") }
            )
        },
        floatingActionButton = {
            FloatingActionButton(onClick = {
                navController.navigate("AddContactView")
            }) {
                Icon(Icons.Default.Add, contentDescription = "")
            }
        }
    ) {
        ContentHomeView(it, viewModel)
    }
}

@Composable
fun ContentHomeView(pad: PaddingValues, viewModel: ContactViewModel) {
    val contacts by viewModel.contactList.collectAsState()

    Column(
        modifier = Modifier
            .padding(pad)
    ) {
        LazyColumn {
            items(contacts) { contact ->
                Text(text = "${contact.name} - ${contact.phone}")
            }
        }
    }
}


File: ./app/src/main/java/com/example/contactapp/view/AddContactView.kt

package com.example.contactapp.view

import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Button
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.example.contactapp.model.ContactModel
import com.example.contactapp.viewModel.ContactViewModel

@Composable
fun AddContactView(navController: NavController, viewModel: ContactViewModel) {
    var name by remember { mutableStateOf("") }
    var phone by remember { mutableStateOf("") }
    var email by remember { mutableStateOf("") }
    var profileImage by remember { mutableStateOf("") }
    var dateOfBirth by remember { mutableStateOf("") }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        OutlinedTextField(
            value = name,
            onValueChange = { name = it },
            label = { Text(text = "Nombre") },
            modifier = Modifier.padding(8.dp)
        )
        OutlinedTextField(
            value = phone,
            onValueChange = { phone = it },
            label = { Text(text = "Teléfono") },
            modifier = Modifier.padding(8.dp)
        )
        OutlinedTextField(
            value = email,
            onValueChange = { email = it },
            label = { Text(text = "Correo") },
            modifier = Modifier.padding(8.dp)
        )
        OutlinedTextField(
            value = profileImage,
            onValueChange = { profileImage = it },
            label = { Text(text = "Imagen de Perfil (Ruta)") },
            modifier = Modifier.padding(8.dp)
        )
        OutlinedTextField(
            value = dateOfBirth,
            onValueChange = { dateOfBirth = it },
            label = { Text(text = "Fecha de Nacimiento") },
            modifier = Modifier.padding(8.dp)
        )
        Button(
            onClick = {
                val newContact = ContactModel(
                    name = name,
                    phone = phone,
                    email = email,
                    profileImage = profileImage,
                    dateOfBirth = dateOfBirth
                )
                viewModel.insertContact(newContact)
                navController.popBackStack() // Volver a la vista anterior
            },
            modifier = Modifier.padding(8.dp)
        ) {
            Text(text = "Guardar Contacto")
        }
    }
}


